ZAD 1 - SYMULACJA

(input a, b, cin, output s, cout);

assign s = a ^ b ^ cin;
assign cout = a & b | (a ^ b) & cin;

ZAD 1 - ADDER-1-BIT

module zad1_1 (

input [0:2] SW,
output [0:1] LEDR);
assign LEDR[0] = SW[0] ^ SW[1] ^ SW[2];
assign LEDR[1] = SW[0] & SW[1] | (SW[0] ^ SW[1])&SW[2];

endmodule

ZAD 2

module zad1_2 (SW, LEDR);
input [0:2] SW;
output [0:1] LEDR;
wire g1_o, g2_o, g3_o, a, b, cin, cout, s;

assign a = SW[0];
assign b = SW[1];
assign cin = SW[2];
assign LEDR[0] = s;
assign LEDR[1] = cout;

xor g1 (g1_o, a, b);
xor g2 (s, g1_o, cin);
and g3 (g2_o, a, b);
or g4 (g3_o, g2_o, g1_o);
and g5 (cout, g3_o, cin);

endmodule

ZAD 3

module bit_one_add (SW, LEDR);
input [0:2] SW;
output [0:1] LEDR;
wire a, b, cin, cout, s;

assign a = SW[0];
assign b = SW[1];
assign cin = SW[2];
assign LEDR[0] = s;
assign LEDR[1] = cout;

assign {cout, s} = a + b + cin;

endmodule

ZAD 4

module zad1_2 (SW, LEDR);
input [0:8] SW;
output[0:4] LEDR;

wire A [0:3], B [0:3], CIN, S [0:3], COUT, C [0:2];

assign A[0] = SW[0];
assign A[1] = SW[1];
assign A[2] = SW[2];
assign A[3] = SW[3];
assign B[0] = SW[4];
assign B[1] = SW[5];
assign B[2] = SW[6];
assign B[3] = SW[7];
assign LEDR[0] = S[0];
assign LEDR[1] = S[1];
assign LEDR[2] = S[2];
assign LEDR[3] = S[3];
assign LEDR[4] = COUT;
assign CIN = SW[8];

bit_one_add(CIN, A[0], B[0], S[0], C[0]);
bit_one_add(C[0], A[1], B[1], S[1], C[1]);
bit_one_add(C[1], A[2], B[2], S[2], C[2]);
bit_one_add(C[2], A[3], B[3], S[3], COUT);

endmodule
